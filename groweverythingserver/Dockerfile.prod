##########
# BUILDER #
##########

# pull officail base image
FROM python:3.10-slim-buster as builder

WORKDIR /app

# environment variables
# prevent python writing pyc to disc
ENV PYTHONDONTWRITEBYTECODE 1
# prevent python buffering stdout and stderr
ENV PYTHONBUFFERED 1 WEB_CONCURRENCY=3
# fix cryptography package errors
ENV CRYPTOGRAPHY_DONT_BUILD_RUST=1

# install psycopg2 dependencies
RUN apt-get update && apt-get -y install netcat gcc postgresql && apt-get clean

RUN apt-get update \
    && apt-get install -y binutils libproj-dev gdal-bin python-gdal python3-gdal postgis

# lint
RUN pip install --upgrade pip
# RUN pip install flake8
COPY . .

# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /backend-server/wheels -r requirements.txt



#########
# FINAL #
#########

FROM python:3.10-slim-buster

#  create directory for app user
RUN mkdir -p /home/app

# create app user
RUN addgroup -S app && adduser -S app -G app

# create appropriate directories
# ENV HOME=/home/app
ENV APP_HOME=/home/app
# RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/mediafiles
WORKDIR $APP_HOME

#  install dependencies
RUN apt-get update && apt-get -y install libpq
COPY --from=builder /app/wheels /wheels
COPY --from=builder /app/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy entrypoint prod.sh
COPY ./entrypoint.prod.sh $APP_HOME

# copy project
COPY . $APP_HOME

# chown all files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run the entrypointprod.sh
ENTRYPOINT [ "/home/app/entrypointprod.sh" ]